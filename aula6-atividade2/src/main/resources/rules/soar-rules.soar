# DISCIPLINA UNICAMP IA941
# Professor Ricardo Ribeiro Gudwin
# Aula 6 Atividade 1
# Aluno Gustavo Shoiti Sonoda
# RA 217579

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

watch 5
learn --off
epmem --set learning off

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# ELABORAÇÕES
sp {elaboracao_atualizar_leaflets_faltantes
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LEAFLET <leaflet>)
   (<leaflet> ^ITEM <leafletItem>)
   (<creature> ^BAG <bag>)
   (<bag> ^ITEM <bagItem>)
   (<leafletItem> ^COLOR <lColor>)
   (<bagItem> ^COLOR <lColor>)
   (<leafletItem> ^NEEDED <needed>)
   (<bagItem> ^COUNT <count>)
   -->
   (<leafletItem> ^LEFT (- <needed> <count>))
}
sp {elaboracao_verificar_esta_no_leaflet
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY.ENTITY <entity>)
   (<entity> ^COLOR <eColor>)
   (<entity> ^TYPE JEWEL)
   (<creature> ^LEAFLET.ITEM <leafletItem>)
   (<leafletItem> ^COLOR <eColor>)
   (<leafletItem> ^LEFT <needed> > 0)
   -->
   (<entity> ^in-leaflet true)
}
sp {elaboracao_calcular_distancia
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   -->
   (<entityInMemory> ^distance (sqrt (+ (* (- <creaturePositionX> <entityInMemoryPositionX>) (- <creaturePositionX> <entityInMemoryPositionX>)) (* (- <creaturePositionY> <entityInMemoryPositionY>) (- <creaturePositionY> <entityInMemoryPositionY>)))))
}

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# OPERADORES DE INICIALIZAÇÃO

sp {propor_inicializacao
   (state <s> ^superstate nil)
   -(<s> ^iocopy)
   -(<s> ^plan <p>)
   -->
   (<s> ^operator <o> + >)
   (<o> ^name operadorInicializar)
}
sp {aplicar_inicializacao
   (state <s> ^operator.name operadorInicializar)
   (<s> ^io <io>) 
   -->
   (<s> ^plan <p>)
   (<p> ^step 0)
   (<s> ^iocopy (deep-copy <io>))
}

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Operadores de Planejamento

sp {propor_plano_sucesso
   (state <s> ^io.output-link <ol>)
   (<s> ^status sucess)
   -->
   (<s> ^operator <o> + >)
   (<o> ^name operadorPlanoSucesso)
}
sp {aplicar_plano_sucesso
    (state <s> ^io.output-link <ol>)
    (<s> ^operator.name operadorPlanoSucesso)
    (<s> ^plan <plan>)
    (<plan> ^0 <command>)
    (<command> ^<action> <a>)
   -->
    (<ol> ^<action> <a>)
    (<s> ^status sucess -)
    (write |PLANO DE SUCESSO ENCONTRADO! EXECUTANDO...| (crlf))
    (interrupt)
}
sp {propor_plano_falha
   (state <s> ^io.output-link <ol>)
   (<s> ^status failure)
   -->
   (<s> ^operator <o> + =)
   (<o> ^name planFail)
}
sp {aplica_plano_falha
    (state <s> ^io.output-link <ol>)
    (<s> ^operator <o>)
    (<o> ^name planFail)
   -->
    (<ol> ^MOVE <COMANDO>)
    (<COMANDO> ^Vel 0)
    (<COMANDO> ^VelR 2)
    (<COMANDO> ^VelL 0)
    (<s> ^status failure -)
   (write |PLANO FALHOU DELIBERAR NOVAMENTE...| (crlf))
   (interrupt)
}
sp {aplica_reiniciar_plano
    (state <s> ^impasse no-change ^superstate <ss>)
    (<ss> ^io.output-link <ol>)
    (<s> ^plan <plan>)
    -(<plan> ^0 <command>)
   -->
   (interrupt)
}
    
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# OPERADORES MOVER COMIDA

sp {propor_mover_comida
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE FOOD)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^distance <distance>)
   (<entityInMemory> ^NAME <entityInMemoryName>) 
   (<creature> ^PARAMETERS.MINFUEL <minFuel>) 
   -->
   (<s> ^operator <o> +)
   (<o> ^name operadorMoverComida)
   (<o> ^parameter <food>)
   (<food> ^distance <distance>)
   (<food> ^X <entityInMemoryPositionX>)
   (<food> ^Y <entityInMemoryPositionY>)
   (<food> ^NAME <entityInMemoryName>)
   (<o> ^parameterFuel <minFuel>)
}
sp {aplicar_mover_comida
   (state <s> ^operator <o>
              ^iocopy <io>)
   (<io> ^input-link <il>)             
   (<io> ^output-link <ol>)
   (<o> ^name operadorMoverComida)
   (<o> ^parameter <food>)
   (<food> ^X <x>)
   (<food> ^Y <y>)
   (<food> ^NAME <entityInMemoryName>)
   (<il> ^CREATURE <creature>)   
   (<creature> ^LONGMEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   (<creature> ^POSITION <position>)
   (<position> ^X <px>)
   (<position> ^Y <py>)
   (<s> ^plan <p>)
   (<p> ^step <stepNumber>)
   -->
   (<position> ^X <px> - 
               ^X <x>)

   (<position> ^Y <py> - 
               ^Y <y>)

   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^MOVE <command>)
   (<command> ^Vel 1)
   (<command> ^VelR 1)
   (<command> ^VelL 1)
   (<command> ^X <x>)
   (<command> ^Y <y>)
   (write | DELIBERANDO... PASSO: | <stepNumber> (crlf))
   # (write |MOVER PARA COMIDA EM X: | <x> | - Y: | <y> (crlf))
   #(halt)
}
  
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# OPERADORES COMER COMIDA

sp {propose*eat*food
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY.ENTITY <entity>)
   (<entity> ^TYPE FOOD) 
   (<entity> ^distance <foodDistance> < 30)
   (<entity> ^NAME <foodName>)  
   -->
   (<s> ^operator <o> +)
   (<o> ^name operadorComerComida)
   (<o> ^parameter <food>)
   (<food> ^distance <foodDistance>)
   (<food> ^NAME <foodName>)
   (<food> ^distance <foodDistance>)
}
sp {apply*eat*food
   (state <s> ^operator <o>
              ^iocopy <io>)
   (<io> ^input-link <il>)      
   (<io> ^output-link <ol>)
   (<o> ^name operadorComerComida)
   (<o> ^parameter.NAME <foodName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^SENSOR <sensor>)
   (<creature> ^LONGMEMORY <memory>)
   (<sensor> ^FUEL <fuel>)
   (<fuel> ^VALUE <fuelValue>)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <memoryEntityName> <foodName>)
   - (<ol> ^EAT <something>)
   (<s> ^plan <p>)
   (<p> ^step <stepNumber>)
   -->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^EAT <command>)
   (<command> ^Name <foodName>)
   (<memory> ^ENTITY <memoryEntity> -)
   (write | DELIBERANDO... PASSO: | <stepNumber> (crlf))
   # (write |COMER COMIDA: | <foodName> (crlf))
   #(halt)
}
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# MOVER JOIA

sp {propor_mover_joia
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<creature> ^POSITION <creaturePosition>)
   (<creaturePosition> ^X <creaturePositionX>)
   (<creaturePosition> ^Y <creaturePositionY>)
   (<entityInMemory> ^TYPE JEWEL)
   (<entityInMemory> ^X <entityInMemoryPositionX>)
   (<entityInMemory> ^Y <entityInMemoryPositionY>)
   (<entityInMemory> ^distance <distance>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   (<entityInMemory> ^COLOR <entityInMemoryColor>)   
   (<entityInMemory> ^in-leaflet true)    
   -->
   (<s> ^operator <o> +)
   (<o> ^name operadorMoverJoia)
   (<o> ^parameter <jewel>)
   (<jewel> ^distance <distance>)
   (<jewel> ^X <entityInMemoryPositionX>)
   (<jewel> ^Y <entityInMemoryPositionY>)
   (<jewel> ^NAME <entityInMemoryName>)
   (<jewel> ^COLOR <entityInMemoryColor>)
}
sp {aplicar_mover_joia
   (state <s> ^operator <o>
              ^iocopy <io>)
   (<io> ^input-link <il>)           
   (<io> ^output-link <ol>)
   (<o> ^name operadorMoverJoia)
   (<o> ^parameter <jewel>)
   (<jewel> ^X <x>)
   (<jewel> ^Y <y>)
   (<jewel> ^NAME <entityInMemoryName>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY <memory>)
   (<memory> ^ENTITY <entityInMemory>)
   (<entityInMemory> ^NAME <entityInMemoryName>)
   (<creature> ^POSITION <position>)
   (<position> ^X <px>)
   (<position> ^Y <py>)
   (<s> ^plan <p>)
   (<p> ^step <stepNumber>)
   -->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^MOVE <command>)
   (<command> ^Vel 1)
   (<command> ^VelR 1)
   (<command> ^VelL 1)
   (<command> ^X <x>)
   (<command> ^Y <y>)
   (<position> ^X <px> - 
               ^X <x>)

   (<position> ^Y <py> - 
               ^Y <y>)
   (write | DELIBERANDO... PASSO: | <stepNumber> (crlf))
   # (write | MOVER PARA JOIA EM X: | <x> | - Y: | <y> (crlf))
   #(halt)
}
# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# PEGAR JOIA

sp {propor_pegar_joia
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY <memory>)
   (<entity> ^TYPE JEWEL) 
   (<entity> ^distance <jewelDistance> < 30)
   (<entity> ^NAME <jewelName>)
   (<entity> ^in-leaflet true)
   (<creature> ^LONGMEMORY.ENTITY.NAME <memoryItemName> <jewelName>)     
   -->
   (<s> ^operator <o> + =)
   (<o> ^name operadorPegarJoia)
   (<o> ^parameter <jewel>)
   (<jewel> ^NAME <jewelName>)
   (<jewel> ^distance <jewelDistance>)
}
sp {aplicar_pegar_joia
   (state <s> ^operator <o>
              ^iocopy <io>)
   (<io> ^input-link <il>)      
   (<io> ^output-link <ol>)
   (<o> ^name operadorPegarJoia)
   (<o> ^parameter.NAME <jewelName>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^LONGMEMORY <memory>)
   (<memory> ^ENTITY <memoryEntity>)
   (<memoryEntity> ^NAME <memoryEntityName> <jewelName>)
   - (<ol> ^GET <anything>) 
   (<creature> ^BAG.ITEM <bagItem>)
   (<memoryEntity> ^COLOR <entityColor>)
   (<bagItem> ^COLOR <entityColor>)
   (<bagItem> ^COUNT <count>)
   (<s> ^plan <p>)
   (<p> ^step <stepNumber>)
   -->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^GET <command>)
   (<command> ^Name <jewelName>)
   (<bagItem> ^COUNT (+ <count> 1)
              ^COUNT <count> -)
   (<memory> ^ENTITY <memoryEntity> -)
   # (<s> ^remove-jewel-from-leaflet <entityColor>)
   (write | DELIBERANDO... PASSO: | <stepNumber> (crlf))
   # (write | PEGAR JOIA: | <jewelName> (crlf))
   #(halt)
}

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# OPERADORES STATUS LEAFLET

sp {propor_atualizar_status_leaflet
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LEAFLET <leaflet>)
   - (<leaflet> ^ITEM.LEFT <needed> > 0)
   (<leaflet> ^SITUATION 0.0)
   --> 
   (<s> ^operator <o> + =, >)
   (<o> ^name operadorAtualizarStatus)
   (<o> ^parameter <leaflet>)
}
sp {aplicar_atualizar_status_leaflet
   (state <s> ^iocopy.input-link <il>)
   (<s> ^operator <o>)
   (<o> ^name operadorAtualizarStatus)
   (<o> ^parameter <leaflet>)
   (<leaflet> ^SITUATION <situation>)
   (<leaflet> ^ID <leafletID>)
   --> 
   (<leaflet> ^SITUATION <situation> -)
   (<leaflet> ^SITUATION 1.0)
}

# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# OPERADOR ENTREGAR LEAFLET

sp {propor_entregar_leaflet
   (state <s> ^iocopy.input-link <il>)
   (<il> ^CREATURE <creature>)
   (<creature> ^LONGMEMORY.ENTITY <entity>)
   (<creature> ^LEAFLET <leaflet>)
   (<leaflet> ^SITUATION <situation> > 0)    
   (<leaflet> ^ID <leafletID>)
   (<leaflet> ^PAYMENT <payment>)
   (<leaflet> ^NAME <leafletName>)
   -->
   (<s> ^operator <o> + =)
   (<o> ^name operadorEntregarLeaflet)
   (<o> ^parameter <delivery>)
   (<delivery> ^ID <leafletID>)
}
sp {aplicar_entregar_leaflet
   (state <s> ^operator <o>
              ^iocopy <io>)
   (<io> ^input-link <il>)      
   (<o> ^name operadorEntregarLeaflet)
   (<o> ^parameter.ID <leafletID>)
   (<il> ^CREATURE <creature>) 
   (<creature> ^LEAFLET <leaflet>)
   (<leaflet> ^ID <memoryID> <leafletID>)
   (<leaflet> ^NAME <leafletName>)
   - (<ol> ^DELIVER <anything>)
   (<s> ^plan <p>)
   (<p> ^step <stepNumber>)
   -->
   (<p> ^step <stepNumber> -)
   (<p> ^step (+ <stepNumber> 1))
   (<p> ^<stepNumber> <cm>)
   (<cm> ^DELIVER <command>)
   (<command> ^ID <leafletID>)
   (<leaflet> ^SITUATION <sit> -)
   (<leaflet> ^SITUATION 0.0)
   (<s> ^status sucess)
   (write | DELIBERANDO... PASSO: | <stepNumber> (crlf))
   (write | PLANO ATUAL => Completar Leaflet : | <leafletName> (crlf))
   # (write |ENTREGAR LEAFLET: | <leafletID> (crlf))
   #(halt)
}


# |||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# REGRAS DE PREFERENCIA

# Move Jewel or Move Food vs Get Jewel - operadorPegarJoia wins
sp {pref*operadorMoverJoia*operadorPegarJoia
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorPegarJoia)
(<o2> ^name << operadorMoverJoia operadorMoverComida moveDelivery >>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorMoverJoia/operadorMoverComida vs operadorPegarJoia - operadorPegarJoia wins| (crlf) )
} 

# Get Jewel vs Avoid Brick - operadorPegarJoia wins
sp {pref*operadorPegarJoia*avoidBrick
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorPegarJoia)
(<o2> ^name avoidBrick)
-->
(<s> ^operator <o> > <o2>)
#  (write |operadorPegarJoia vs avoidBrick - operadorPegarJoia wins| (crlf) )
 } 

# Move Jewel vs Move Jewel - closer distance wins
sp {pref*operadorMoverJoia*operadorMoverJoia*less*distance
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorMoverJoia)
(<o2> ^name operadorMoverJoia)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> < <distance2>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorMoverJoia vs operadorMoverJoia | <distance> | smaller then | <distance2> (crlf) )
}

# Move Jewel vs Move Jewel - equal distances are the same
sp {pref*operadorMoverJoia*operadorMoverJoia*equals
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorMoverJoia)
(<o2> ^name operadorMoverJoia)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> == <distance2>)
-->
(<s> ^operator <o> = <o2>)
# (write |operadorMoverJoia vs operadorMoverJoia | <distance> | equals to | <distance2> (crlf) )
} 

# Get Jewel vs Get Jewel Preferences
sp {pref*operadorPegarJoia*operadorPegarJoia
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorPegarJoia)
(<o2> ^name operadorPegarJoia)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> < <distance2>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorPegarJoia vs operadorPegarJoia | <distance> | less than | <distance2> (crlf) )
} 

# Get Jewel vs Get Jewel Preferences
sp {pref*operadorPegarJoia*operadorPegarJoia-equals
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorPegarJoia)
(<o2> ^name operadorPegarJoia)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> == <distance2>)
-->
(<s> ^operator <o> = <o2>)
# (write |operadorPegarJoia vs operadorPegarJoia | <distance> | less than | <distance2> (crlf) )
} 

# Get Jewel vs Hide Jewel - operadorPegarJoia wins
sp {pref*operadorPegarJoia*hideJewel
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorPegarJoia)
(<o2> ^name hideJewel)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorPegarJoia vs hideJewel - operadorPegarJoia wins| (crlf) )
} 

# Move Jewel or Move Food vs Hide Jewel - hideJewel wins
sp {pref*operadorMoverJoia*hideJewel
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name hideJewel)
(<o2> ^name << operadorMoverJoia operadorMoverComida moveDelivery >>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorMoverJoia/operadorMoverComida vs hideJewel - hideJewel wins| (crlf) )
} 

# Hide Jewel vs Avoid Brick - hideJewel wins
sp {pref*hideJewel*avoidBrick
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name hideJewel)
(<o2> ^name avoidBrick)
-->
(<s> ^operator <o> > <o2>)
#  (write |hideJewel vs avoidBrick - hideJewel wins| (crlf) )
 } 

# Hide Jewel vs Hide Jewel Preferences
sp {pref*hideJewel*hideJewel
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name hideJewel)
(<o2> ^name hideJewel)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> < <distance2>)
-->
(<s> ^operator <o> > <o2>)
# (write |hideJewel vs hideJewel | <distance> | less than | <distance2> (crlf) )
} 

# Hide Jewel vs Hide Jewel Preferences
sp {pref*hideJewel*hideJewel-equals
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name hideJewel)
(<o2> ^name hideJewel)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> == <distance2>)
-->
(<s> ^operator <o> = <o2>)
# (write |hideJewel vs hideJewel | <distance> | less than | <distance2> (crlf) )
} 

# FOOD

# Move Food vs Eat Food
sp {pref*operadorMoverComida*operadorComerComida
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorComerComida)
(<o2> ^name << operadorMoverComida operadorMoverJoia moveDelivery >>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorComerComida vs move{Food/Jewel} - operadorComerComida wins | (crlf) )
} 

# Eat Food vs Avoid Brick
sp {pref*operadorComerComida*avoidBrick
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorComerComida)
(<o2> ^name avoidBrick)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorComerComida vs avoidBrick - operadorComerComida wins| (crlf))
} 

# Eat Food vs Get/Hide Jewel/Deliver Leaflet
sp {pref*operadorComerComida*operadorPegarJoia*hideJewel*operadorEntregarLeaflet
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorComerComida)
(<o2> ^name << operadorPegarJoia hideJewel operadorEntregarLeaflet >>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorComerComida vs get/hide {Jewel} / {operadorEntregarLeaflet} - operadorComerComida wins | (crlf) )
} 

# Move Food vs Move Food Preferences
sp {pref*operadorMoverComida*operadorMoverComida
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorMoverComida)
(<o2> ^name operadorMoverComida)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> < <distance2>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorMoverComida vs operadorMoverComida | <distance> | less than | <distance2> (crlf))
}

# Move Food vs Move Food Preferences
sp {pref*operadorMoverComida*operadorMoverComida-equals
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorMoverComida)
(<o2> ^name operadorMoverComida)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> == <distance2>)
-->
(<s> ^operator <o> = <o2>)
# (write |operadorMoverComida vs operadorMoverComida | <distance> | equals to | <distance2> (crlf) )
}

# Eat Food vs Eat Food Preferences
sp {pref*operadorComerComida*operadorComerComida-less
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorComerComida)
(<o2> ^name operadorComerComida)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> < <distance2>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorComerComida vs operadorComerComida | <distance> | less than | <distance2> (crlf))
} 

# Eat Food vs Eat Food Preferences
sp {pref*operadorComerComida*operadorComerComida-equals
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorComerComida)
(<o2> ^name operadorComerComida)
(<o2> ^parameter.distance <distance2>)
(<o>  ^parameter.distance <distance> == <distance2>)
-->
(<s> ^operator <o> = <o2>)
# (write |operadorComerComida vs operadorComerComida | <distance> | equals to | <distance2> (crlf))
} 

# FOOD vs JEWEL

# Move Food vs Move Jewel Preferences - Move Food Wins
sp {pref*operadorMoverComida*operadorMoverJoia*operadorMoverComidaWins
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorMoverComida)
(<o> ^parameterFuel <threshold>)
(<o2> ^name << operadorMoverJoia moveDelivery >>)
(<s> ^io.input-link <il>)
(<il> ^CREATURE.SENSOR.FUEL <fuel>)
(<fuel> ^VALUE <value> < <threshold>)        
-->
(<s> ^operator <o> > <o2>)
# (write |operadorMoverComida vs operadorMoverJoia | <value> | less than | <threshold> (crlf) )
} 

# Move Food vs Move Jewel Preferences - Move Jewel Wins
sp {pref*operadorMoverComida*operadorMoverJoia*operadorMoverJoiaWins
(state <s> ^operator <o> + 
                     <o2> +)
(<s> ^io.input-link <il>)
(<o> ^name operadorMoverComida)
(<o> ^parameterFuel <threshold>)
(<o2> ^name << operadorMoverJoia moveDelivery >>)
(<il> ^CREATURE.SENSOR.FUEL <fuel>)
(<fuel> ^VALUE <value> > <threshold>)        
-->
(<s> ^operator <o2> > <o>)
# (write |operadorMoverComida vs operadorMoverJoia | <value> | higher than | <threshold> (crlf) )
} 

# Move Food vs Move Jewel Preferences - Move Jewel Wins
sp {pref*operadorMoverComida*operadorMoverJoia*tie
(state <s> ^operator <o> + 
                     <o2> +)
(<s> ^io.input-link <il>)
(<o> ^name operadorMoverComida)
(<o> ^parameterFuel <threshold>)
(<o2> ^name << operadorMoverJoia moveDelivery >>)
(<il> ^CREATURE.SENSOR.FUEL <fuel>)
(<fuel> ^VALUE <value> <= <threshold>)        
-->
(<s> ^operator <o2> = <o>)
# (write |operadorMoverComida vs operadorMoverJoia | <value> | higher than | <threshold> (crlf) )
} 

#DELIVERY

# Move Delivery vs Move Delivery - Move delivery wins
sp {pref*moveDelivery*moveDelivery
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name moveDelivery)
(<o2> ^name moveDelivery)
-->
(<s> ^operator <o> = <o2>)
# (write |moveDelivery vs moveDelivery - moveDelivery ties| (crlf) )
} 

# Move Delivery vs Move Jewel - Move delivery wins
sp {pref*moveDelivery*operadorMoverJoia
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name moveDelivery)
(<o2> ^name operadorMoverJoia)
-->
(<s> ^operator <o> > <o2>)
# (write |moveDelivery vs operadorMoverJoia - moveDelivery wins| (crlf) )
} 

# Deliver Leaflet vs Move Delivery
sp {pref*operadorEntregarLeaflet*moveDelivery
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorEntregarLeaflet)
(<o2> ^name << operadorMoverComida operadorMoverJoia moveDelivery >>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorEntregarLeaflet vs move{Food/Jewel/Delivery} - operadorEntregarLeaflet wins | (crlf) )
} 

# Deliver Leaflet vs Deliver Leaflet Preferences Wins
sp {pref*operadorEntregarLeaflet*operadorEntregarLeaflet*wins
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorEntregarLeaflet)
(<o2> ^name operadorEntregarLeaflet)
(<o2> ^parameter.payment <payment2>)
(<o>  ^parameter.payment <payment> > <payment2>)
-->
(<s> ^operator <o> > <o2>)
# (write |operadorEntregarLeaflet vs operadorEntregarLeaflet | <payment> | more than | <payment2> (crlf))
} 

#BRICK  

# Avoid Brick vs Avoid Brick Preferences
sp {pref*avoidBrick*avoidBrick*without*move*jewel-less
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name avoidBrick)
(<o2> ^name avoidBrick)
(<o2> ^parameter <distance2>)
(<o>  ^parameter <distance> < <distance2>)
-->
(<s> ^operator <o> > <o2>)
(write |avoidBrick vs avoidBrick | <distance> | less than | <distance2>) (crlf)}

# Avoid Brick vs Avoid Brick Preferences
sp {pref*avoidBrick*avoidBrick*without*move*jewel-equals
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name avoidBrick)
(<o2> ^name avoidBrick)
(<o2> ^parameter <distance2>)
(<o>  ^parameter <distance> == <distance2>)
-->
(<s> ^operator <o> = <o2>)
(write |avoidBrick vs avoidBrick | <distance> | equals to | <distance2> (crlf))}


# WANDER

# Wander Preferences
sp {pref*wander
(state <s> ^operator <o> +)
(<o> ^name wander)
-->
(<s> ^operator <o> <)}

sp {halt*condition
  (state <s> ^impasse no-change ^superstate <ss>)
  (<ss> ^io.output-link <ol>)
  (<ss> ^plan <plan>)
  (<plan> ^0 <command>)
  (<command> ^<action> <a>)
-->
  (<ss> ^status failure)
  (write |HALT CONDITION| (crlf))
}


sp {pref*operadorAtualizarStatus*operadorEntregarLeaflet
(state <s> ^operator <o> + 
                     <o2> +)
(<o> ^name operadorAtualizarStatus)
(<o2> ^name << operadorEntregarLeaflet operadorPlanoSucesso >>)
-->
(<s> ^operator <o> > <o2>)
} 

# HALT

# sp {halt*condition
#    (state <s> ^io.output-link <ol>)
#    (<ol> ^<attr> <value>)
#    -->
#    (write |The command: | <attr> | was issued! |)
#    (interrupt) 
# }

